document.addEventListener("DOMContentLoaded", () => {
    const e = document.getElementById("searchInput"),
        t = document.getElementById("categoryFilter"),
        n = document.getElementById("toolsList"),
        o = document.getElementById("pagination"),
        i = document.getElementById("bookmarksList"),
        a = document.getElementById("languageSelect"),
        w = document.getElementById("reviewsList"),
        k = document.getElementById("generateImagesBtn"),
        x = document.getElementById("freeToolsBtn"),
        L = document.getElementById("latestBtn"),
        S = document.getElementById("forYouBtn"),
        C = document.getElementById("trendingBtn"),
        F = document.getElementById("featuredBtn"),
        statsText = document.getElementById("statsText"),
        siteStats = document.getElementById("siteStats"),
        feedbackBtn = document.getElementById("feedbackBtn"),
        loginBtn = document.getElementById("loginBtn"),
        downloadAppBtn = document.getElementById("downloadAppBtn"),
        quickGuideBtn = document.getElementById("quickGuideBtn"),
        dailyTool = document.getElementById("dailyTool"),
        themeSwitch = document.getElementById("themeSwitch"),
        spotlightBtn = document.getElementById("spotlightBtn"),
        spotlightContent = document.getElementById("spotlightContent"),
        h = document.getElementById("reviewTool"),
        v = document.getElementById("reviewText"),
        b = document.getElementById("reviewRating"),
        y = document.getElementById("submitReviewBtn"),
        settingsIcon = document.querySelector(".settings-icon"),
        menuIcon = document.querySelector(".menu");

    let T = [], P = 1, A = 9, D = localStorage.getItem("reviews") ? JSON.parse(localStorage.getItem("reviews")) : [], I = localStorage.getItem("submittedTools") ? JSON.parse(localStorage.getItem("submittedTools")) : [];

    // Fungsi animasi counter
    function animateCounter(target, element, initialDuration, interval) {
        let current = 0;
        let isInitial = true;
        const range = target - current;
        const increment = target / (initialDuration / 16);
        const startTime = performance.now();

        function update() {
            const currentTime = performance.now();
            if (isInitial) {
                const progress = Math.min((currentTime - startTime) / initialDuration, 1);
                current = Math.floor(current + range * easeInOutQuad(progress));
                if (progress >= 1) {
                    current = target;
                    isInitial = false;
                    setTimeout(startRandomCounter, interval * 1000);
                }
            } else {
                current += Math.floor(Math.random() * 10) + 1;
            }
            const tasks = Math.floor(current * 0.354).toLocaleString();
            const jobs = Math.floor(current * 0.13).toLocaleString();
            element.textContent = current.toLocaleString() + " AI tools for " + tasks + " tasks and " + jobs + " jobs";
            if (isInitial || !isInitial) requestAnimationFrame(update);
        }

        function easeInOutQuad(t) {
            return t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2;
        }

        function startRandomCounter() {
            setInterval(() => {
                current += Math.floor(Math.random() * 10) + 1;
                const tasks = Math.floor(current * 0.354).toLocaleString();
                const jobs = Math.floor(current * 0.13).toLocaleString();
                element.textContent = current.toLocaleString() + " AI tools for " + tasks + " tasks and " + jobs + " jobs";
            }, interval * 1000);
        }

        requestAnimationFrame(update);
    }

    if (statsText) {
        animateCounter(38345, statsText, 2000, 2);
    }

    // Fetch tools.json dengan penanganan error yang lebih baik
    fetch("./tools.json") // Gunakan path relatif yang jelas
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status} - File tools.json mungkin tidak ditemukan`);
            }
            return response.json();
        })
        .then(data => {
            T = [...data, ...I];
            const categories = new Set(T.map(tool => tool.category));
            const categorySelect = document.createElement("select");
            categorySelect.id = "categoryFilter";
            categories.forEach(category => {
                const option = document.createElement("option");
                option.value = category;
                option.textContent = category;
                categorySelect.appendChild(option);
            });
            document.querySelector(".search-bar").insertAdjacentElement("afterend", categorySelect);

            fetch("./languages.json")
                .then(langResponse => {
                    if (!langResponse.ok) throw new Error("Gagal memuat languages.json");
                    return langResponse.json();
                })
                .then(languages => {
                    a.addEventListener("change", event => {
                        const lang = languages[event.target.value];
                        document.getElementById("heroText").textContent = lang.hero;
                        document.getElementById("taglineText").textContent = lang.tagline;
                        document.getElementById("statsText").textContent = lang.stats;
                        document.getElementById("rankText").textContent = lang.rank;
                        document.getElementById("spotlightText").textContent = lang.spotlight;
                        document.getElementById("featuredBtnText").textContent = lang.featuredBtn;
                        document.getElementById("releasedText").textContent = lang.released;
                        document.getElementById("bookmarksTitle").textContent = lang.bookmarks;
                        document.getElementById("reviewsTitle").textContent = lang.reviews;
                        document.getElementById("tutorialLink").textContent = lang.tutorial;
                        document.getElementById("modeText").textContent = lang.mode;
                        if (statsText) animateCounter(38345, statsText, 2000, 2);
                    });
                    a.dispatchEvent(new Event("change"));
                })
                .catch(langError => {
                    console.error("Error loading languages.json:", langError);
                    a.dispatchEvent(new Event("change")); // Fallback ke bahasa default
                });
            M();
        })
        .catch(error => {
            console.error("Error loading tools.json:", error);
            n.innerHTML = `<p class="error">Error: Gagal memuat data alat AI. Periksa konsol untuk detail. (${error.message})</p>`;
            // Fallback data (opsional)
            T = [
                { id: "fallback1", name: "Fallback Tool 1", category: "General", url: "#", logo: "https://via.placeholder.com/24", tags: ["ai"], date_added: "2025-01-01", popularity: 4.0, free: true }
            ];
            M();
        });

    function M() {
        n.innerHTML = "", i.innerHTML = "";
        if (T.length === 0) {
            n.innerHTML = '<p class="error">Tidak ada data alat AI yang tersedia.</p>';
            return;
        }
        let searchTerm = E(),
            filteredTools = T.filter(tool => !searchTerm || tool.category === searchTerm || tool.name.toLowerCase().includes(searchTerm.toLowerCase()) || tool.description.toLowerCase().includes(searchTerm.toLowerCase()) || tool.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase())));
        filteredTools.slice((P - 1) * A, P * A).forEach(tool => {
            const card = document.createElement("div");
            card.classList.add("tool-card");
            const isBookmarked = localStorage.getItem("bookmarks")?.split(",").includes(tool.id);
            const isFavorite = JSON.parse(localStorage.getItem('favorites') || '[]').includes(tool.id);
            card.innerHTML = `<a href="${tool.url}" target="_blank"><img src="${tool.logo}" alt="${tool.name} Icon" class="tool-thumbnail"></a><span class="tool-name">${tool.name}</span><span class="tool-category">${tool.category}</span><span class="tool-date">${tool.date_added}</span><div class="rating">${"â˜…".repeat(Math.floor(tool.popularity)).padEnd(5, "â˜†")}</div><a href="${tool.url}" target="_blank" class="tool-link">ðŸŒ</a><span class="tool-check ${isBookmarked ? "tool-bookmark" : ""}" data-id="${tool.id}">${isBookmarked ? "â­" : "âœ…"}</span><span class="quick-favorite" style="color: ${isFavorite ? '#ffca28' : '#ccc'}">â­</span>`;
            tool.tags.forEach(tag => {
                const tagSpan = document.createElement("span");
                tagSpan.classList.add("tool-tag");
                tagSpan.textContent = tag;
                card.appendChild(tagSpan);
            });
            card.querySelector(".tool-check").addEventListener("click", () => {
                !isBookmarked && N(tool.id);
            });
            card.querySelector('.quick-favorite').addEventListener('click', () => {
                let favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
                if (favorites.includes(tool.id)) {
                    favorites = favorites.filter(id => id !== tool.id);
                    card.querySelector('.quick-favorite').style.color = '#ccc';
                } else {
                    favorites.push(tool.id);
                    card.querySelector('.quick-favorite').style.color = '#ffca28';
                }
                localStorage.setItem('favorites', JSON.stringify(favorites));
            });
            n.appendChild(card);
        });
        const bookmarks = localStorage.getItem("bookmarks")?.split(",").filter(id => id).map(id => T.find(tool => tool.id === id));
        bookmarks.forEach(tool => {
            const card = document.createElement("div");
            card.classList.add("tool-card");
            card.innerHTML = `<a href="${tool.url}" target="_blank"><img src="${tool.logo}" alt="${tool.name} Icon" class="tool-thumbnail"></a><span class="tool-name">${tool.name}</span><span class="tool-category">${tool.category}</span><span class="tool-date">${tool.date_added}</span><div class="rating">${"â˜…".repeat(Math.floor(tool.popularity)).padEnd(5, "â˜†")}</div><a href="${tool.url}" target="_blank" class="tool-link">ðŸŒ</a><span class="tool-check tool-bookmark">â­</span>`;
            tool.tags.forEach(tag => {
                const tagSpan = document.createElement("span");
                tagSpan.classList.add("tool-tag");
                tagSpan.textContent = tag;
                card.appendChild(tagSpan);
            });
            i.appendChild(card);
        });
        o.innerHTML = "";
        Array.from({ length: Math.ceil(T.length / A) }, (_, index) => index + 1).forEach(page => {
            const button = document.createElement("button");
            button.textContent = page;
            button.addEventListener("click", () => {
                P = page;
                M();
                button.classList.add("active");
                Array.from(o.children).forEach(btn => btn !== button && btn.classList.remove("active"));
            });
            page === P && button.classList.add("active");
            o.appendChild(button);
        });
        w.innerHTML = "";
        D.forEach(review => {
            const card = document.createElement("div");
            card.classList.add("review-card");
            card.innerHTML = `<p><strong>${review.tool}</strong> - ${review.review} (${review.rating}/5)</p>`;
            w.appendChild(card);
        });

        // Statistik Situs
        if (siteStats) {
            const toolCount = T.length;
            const reviewCount = D.length;
            siteStats.innerHTML = `
                <div class="stat-card">Alat: ${toolCount}</div>
                <div class="stat-card">Ulasan: ${reviewCount}</div>
            `;
        }

        // Alat Terpilih Harian
        if (dailyTool) {
            const lastDate = localStorage.getItem('dailyToolDate');
            const today = new Date().toDateString();
            if (lastDate !== today || !localStorage.getItem('dailyToolId')) {
                const randomTool = T[Math.floor(Math.random() * T.length)];
                localStorage.setItem('dailyToolId', randomTool.id);
                localStorage.setItem('dailyToolDate', today);
                dailyTool.innerHTML = `<div class="daily-tool-card">Alat Terpilih Hari Ini: <span>${randomTool.name}</span></div>`;
            } else {
                const toolId = localStorage.getItem('dailyToolId');
                const tool = T.find(t => t.id === toolId);
                dailyTool.innerHTML = `<div class="daily-tool-card">Alat Terpilih Hari Ini: <span>${tool.name}</span></div>`;
            }
        }

        // Spotlight
        if (spotlightContent) {
            const spotlightTools = T.sort((a, b) => b.popularity - a.popularity).slice(0, 3);
            spotlightContent.innerHTML = spotlightTools.map(tool => `
                <div class="spotlight-item">${tool.name} (${Math.floor(tool.popularity)}/5)</div>
            `).join('');
        }
    }

    function E() {
        return e.value || (t ? t.value : "");
    }

    e.addEventListener("input", M);
    if (t) t.addEventListener("change", M);
    y.addEventListener("click", () => {
        if (h.value && v.value && b.value) {
            D.push({ tool: h.value, review: v.value, rating: b.value });
            localStorage.setItem("reviews", JSON.stringify(D));
            h.value = ""; v.value = ""; b.value = "";
            M();
            triggerNotification("Ulasan baru ditambahkan!");
        }
    });

    const N = toolId => {
        let bookmarks = localStorage.getItem("bookmarks")?.split(",") ?? [];
        if (bookmarks.includes(toolId)) {
            bookmarks = bookmarks.filter(id => id !== toolId);
        } else {
            bookmarks.push(toolId);
            bookmarks = bookmarks.filter(id => id);
        }
        localStorage.setItem("bookmarks", bookmarks);
        M();
        triggerNotification("Bookmark diperbarui!");
    };

    k.addEventListener("click", () => {
        const input = prompt('Masukkan deskripsi gambar:');
        if (input) {
            fetch('https://api.openai.com/v1/images/generations', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer a1434923-5bad-4a3a-96d6-31331254f66e`
                },
                body: JSON.stringify({
                    prompt: input,
                    n: 1,
                    size: "256x256"
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.data && data.data[0].url) {
                    const img = document.createElement('img');
                    img.src = data.data[0].url;
                    n.innerHTML = '';
                    n.appendChild(img);
                } else {
                    alert('Gagal menghasilkan gambar, cek prompt atau API.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Gagal menghasilkan gambar, coba lagi nanti.');
            });
        }
    });

    x.addEventListener("click", () => {
        const freeTools = T.filter(tool => tool.free);
        n.innerHTML = "";
        freeTools.forEach(tool => {
            const card = document.createElement("div");
            card.classList.add("tool-card");
            card.innerHTML = `<a href="${tool.url}" target="_blank"><img src="${tool.logo}" alt="${tool.name} Icon" class="tool-thumbnail"></a><span class="tool-name">${tool.name}</span><span class="tool-category">${tool.category}</span><span class="tool-date">${tool.date_added}</span><div class="rating">${"â˜…".repeat(Math.floor(tool.popularity)).padEnd(5, "â˜†")}</div><a href="${tool.url}" target="_blank" class="tool-link">ðŸŒ</a>`;
            tool.tags.forEach(tag => {
                const tagSpan = document.createElement("span");
                tagSpan.classList.add("tool-tag");
                tagSpan.textContent = tag;
                card.appendChild(tagSpan);
            });
            n.appendChild(card);
        });
        P = 1;
        M();
    });

    L.addEventListener("click", () => {
        const latestTools = T.sort((a, b) => new Date(b.date_added) - new Date(a.date_added)).slice(0, 1);
        n.innerHTML = "";
        latestTools.forEach(tool => {
            const card = document.createElement("div");
            card.classList.add("tool-card");
            card.innerHTML = `<a href="${tool.url}" target="_blank"><img src="${tool.logo}" alt="${tool.name} Icon" class="tool-thumbnail"></a><span class="tool-name">${tool.name}</span><span class="tool-category">${tool.category}</span><span class="tool-date">${tool.date_added}</span><div class="rating">${"â˜…".repeat(Math.floor(tool.popularity)).padEnd(5, "â˜†")}</div><a href="${tool.url}" target="_blank" class="tool-link">ðŸŒ</a>`;
            tool.tags.forEach(tag => {
                const tagSpan = document.createElement("span");
                tagSpan.classList.add("tool-tag");
                tagSpan.textContent = tag;
                card.appendChild(tagSpan);
            });
            n.appendChild(card);
        });
        P = 1;
        M();
    });

    S.addEventListener("click", () => {
        const forYouTools = T.filter(tool => tool.category === "Personal");
        n.innerHTML = "";
        forYouTools.forEach(tool => {
            const card = document.createElement("div");
            card.classList.add("tool-card");
            card.innerHTML = `<a href="${tool.url}" target="_blank"><img src="${tool.logo}" alt="${tool.name} Icon" class="tool-thumbnail"></a><span class="tool-name">${tool.name}</span><span class="tool-category">${tool.category}</span><span class="tool-date">${tool.date_added}</span><div class="rating">${"â˜…".repeat(Math.floor(tool.popularity)).padEnd(5, "â˜†")}</div><a href="${tool.url}" target="_blank" class="tool-link">ðŸŒ</a>`;
            tool.tags.forEach(tag => {
                const tagSpan = document.createElement("span");
                tagSpan.classList.add("tool-tag");
                tagSpan.textContent = tag;
                card.appendChild(tagSpan);
            });
            n.appendChild(card);
        });
        P = 1;
        M();
    });

    C.addEventListener("click", () => {
        const trendingTools = T.filter(tool => tool.name.toLowerCase().includes("trending"));
        n.innerHTML = "";
        trendingTools.forEach(tool => {
            const card = document.createElement("div");
            card.classList.add("tool-card");
            card.innerHTML = `<a href="${tool.url}" target="_blank"><img src="${tool.logo}" alt="${tool.name} Icon" class="tool-thumbnail"></a><span class="tool-name">${tool.name}</span><span class="tool-category">${tool.category}</span><span class="tool-date">${tool.date_added}</span><div class="rating">${"â˜…".repeat(Math.floor(tool.popularity)).padEnd(5, "â˜†")}</div><a href="${tool.url}" target="_blank" class="tool-link">ðŸŒ</a>`;
            tool.tags.forEach(tag => {
                const tagSpan = document.createElement("span");
                tagSpan.classList.add("tool-tag");
                tagSpan.textContent = tag;
                card.appendChild(tagSpan);
            });
            n.appendChild(card);
        });
        P = 1;
        M();
    });

    F.addEventListener('click', () => {
        const featuredTools = T.sort((a, b) => b.popularity - a.popularity).slice(0, 5);
        n.innerHTML = featuredTools.map(tool => `
            <div class="tool-card">
                <a href="${tool.url}" target="_blank"><img src="${tool.logo}" alt="${tool.name} Icon" class="tool-thumbnail"></a>
                <span class="tool-name">${tool.name}</span>
            </div>
        `).join('');
    });

    // Tombol Menu
    let menuOpen = false;
    menuIcon.addEventListener('click', () => {
        if (!menuOpen) {
            const menu = document.createElement('div');
            menu.innerHTML = '<a href="index.html">Home</a><a href="about.html">Tentang Kami</a><a href="blog.html">Blog</a><a href="contact.html">Contact</a><a href="faq.html">FAQ</a><a href="tutorial.html">Tutorial</a><a href="forum.html">Forum</a><a href="profile.html">Profil</a>';
            menu.classList.add('dropdown-menu');
            document.body.appendChild(menu);
            menuOpen = true;
            menu.addEventListener('click', (event) => {
                if (event.target.tagName === 'A') {
                    menu.remove();
                    menuOpen = false;
                }
            });
            document.addEventListener('click', closeMenu);
        }
    });

    function closeMenu(event) {
        const menu = document.querySelector('.dropdown-menu');
        if (menu && !menu.contains(event.target) && event.target !== menuIcon) {
            menu.remove();
            menuOpen = false;
            document.removeEventListener('click', closeMenu);
        }
    }

    // Tombol Actions
    settingsIcon.addEventListener('click', () => {
        const settingsMenu = document.createElement('div');
        settingsMenu.classList.add('settings-menu');
        settingsMenu.innerHTML = '<div>Mode Gelap/Terang (Sudah Aktif)</div><div>Bahasa</div>';
        document.body.appendChild(settingsMenu);
        settingsMenu.addEventListener('click', (event) => {
            if (event.target.textContent === 'Bahasa') {
                a.click();
                settingsMenu.remove();
            }
        });
        document.addEventListener('click', closeSettings);
    });

    function closeSettings(event) {
        const settingsMenu = document.querySelector('.settings-menu');
        if (settingsMenu && !settingsMenu.contains(event.target) && event.target !== settingsIcon) {
            settingsMenu.remove();
            document.removeEventListener('click', closeSettings);
        }
    }

    // Mode Toggle
    themeSwitch.addEventListener('change', () => {
        document.body.classList.toggle('dark-mode', themeSwitch.checked);
        localStorage.setItem('theme', themeSwitch.checked ? 'dark' : 'light');
    });
    if (localStorage.getItem('theme') === 'dark') {
        document.body.classList.add('dark-mode');
        themeSwitch.checked = true;
    }

    // Spotlight
    spotlightBtn.addEventListener('click', () => {
        spotlightContent.classList.toggle('show');
    });

    // Notifikasi
    function triggerNotification(message) {
        if (Notification.permission === 'granted') {
            new Notification('Pembaruan!', { body: message });
        } else if (Notification.permission !== 'denied') {
            Notification.requestPermission().then(permission => {
                if (permission === 'granted') {
                    new Notification('Pembaruan!', { body: message });
                }
            });
        }
    }

    downloadAppBtn.addEventListener('click', () => {
        alert('Aplikasi belum tersedia. Pantau pembaruan!');
    });

    const profileContent = document.getElementById('profileContent');
    if (profileContent) {
        const user = JSON.parse(localStorage.getItem('user'));
        if (user && user.loggedIn) {
            const bookmarks = localStorage.getItem('bookmarks')?.split(',').filter(id => id) || [];
            const reviews = JSON.parse(localStorage.getItem('reviews') || '[]');
            profileContent.innerHTML = `
                <h2>Selamat datang, ${user.email}</h2>
                <h3>Bookmark Anda</h3>
                ${bookmarks.map(id => {
                    const tool = T.find(t => t.id === id);
                    return tool ? `<div class="tool-card"><span>${tool.name}</span></div>` : '';
                }).join('')}
                <h3>Ulasan Anda</h3>
                ${reviews.map(r => `<p>${r.tool} - ${r.review} (${r.rating}/5)</p>`).join('')}
            `;
        } else {
            profileContent.innerHTML = '<p>Silakan login untuk melihat profil.</p>';
        }
    }

    feedbackBtn.addEventListener('click', () => {
        const feedback = prompt('Berikan saran atau umpan balik:');
        if (feedback) {
            const feedbacks = JSON.parse(localStorage.getItem('feedbacks') || '[]');
            feedbacks.push({ text: feedback, date: new Date().toISOString() });
            localStorage.setItem('feedbacks', JSON.stringify(feedbacks));
            alert('Terima kasih atas umpan balik Anda!');
        }
    });

    quickGuideBtn.addEventListener('click', () => {
        alert('Panduan Cepat:\n1. Cari alat di kolom pencarian.\n2. Jelajahi kategori dengan tab.\n3. Tambahkan ulasan atau bookmark.');
    });

    loginBtn.addEventListener('click', () => {
        const email = prompt('Masukkan email:');
        const password = prompt('Masukkan kata sandi:');
        if (email && password) {
            localStorage.setItem('user', JSON.stringify({ email, loggedIn: true }));
            loginBtn.textContent = 'Logout';
            loginBtn.id = 'logoutBtn';
            document.getElementById('logoutBtn').addEventListener('click', () => {
                localStorage.removeItem('user');
                document.getElementById('logoutBtn').textContent = 'Login';
                document.getElementById('logoutBtn').id = 'loginBtn';
            });
            alert('Login berhasil!');
        }
    });
});
